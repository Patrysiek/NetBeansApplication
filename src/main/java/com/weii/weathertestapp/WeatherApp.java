/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.weii.weathertestapp;


import com.fasterxml.jackson.core.JsonProcessingException;
import com.weii.weathertestapp.weather.WeatherInfoModel;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.URISyntaxException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;

/**
 *
 * @author Patryk
 */
public class WeatherApp extends javax.swing.JFrame {


    private DefaultListModel<String> historyListModel;
    private List<WeatherInfoModel> weatherList;
    private WeatherInfoModel currentWeather;
    
    public WeatherApp() throws IOException, URISyntaxException {
        initComponents();
        initListModel();
        initListView();
        initSearchMechanism();
        initClearButton();
        initSaveButton();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        weatherComponent = new com.weii.weathercomponent.WeatherComponent();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(weatherComponent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(weatherComponent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WeatherApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WeatherApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WeatherApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WeatherApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(()->{
                try {
                    new WeatherApp().setVisible(true);
                } catch (IOException | URISyntaxException ex) {
                    Logger.getLogger(WeatherApp.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.weii.weathercomponent.WeatherComponent weatherComponent;
    // End of variables declaration//GEN-END:variables

    private void initListView() {
       historyListModel = new DefaultListModel<>();
       weatherList.forEach(x->{
           addElementToHistoryModel(x);
        
       });
       this.weatherComponent.getHistoryList().setModel(historyListModel);
       this.weatherComponent.getHistoryList().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
       this.weatherComponent.getHistoryList().addListSelectionListener(x->{
           int index = x.getFirstIndex();
           currentWeather = weatherList.get(index);
           setValuesFromWeather(currentWeather);
        });
    }
    private void initListModel() {
        try {
            this.weatherList = new ArrayList<>(WeatherInfoFileManager.readListFromFile());
        } catch (URISyntaxException | IOException ex) {
            this.weatherList = new ArrayList<>();
            ex.printStackTrace();
        }
    }
    
    private void initSaveButton(){
        this.weatherComponent.getSaveButton().addActionListener(x->{
            if(currentWeather==null){
                return;
            }
            this.weatherList.add(currentWeather);
            try {
                WeatherInfoFileManager.saveToFile(weatherList);
                addElementToHistoryModel(currentWeather);
            } catch (URISyntaxException | IOException ex) {
                Logger.getLogger(WeatherApp.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        });
    }
    
    private void initClearButton(){
        this.weatherComponent.getClearButton().addActionListener(x->{
        this.weatherComponent.getCityLabel().setText("City");
        this.weatherComponent.getPressLabel().setText("Pressure");
        this.weatherComponent.getCoordsLabel().setText("Lat");
        this.weatherComponent.getDateLabel().setText("Date");
        this.weatherComponent.getTempLabel().setText("Temperature");
        this.weatherComponent.getSunLabel().setText("Sunset");
        this.weatherComponent.getPressLabel().setText("Sunrise");
        this.currentWeather = null;
        });
    }
    
    private void initSearchMechanism() {
        this.weatherComponent.getSearchButton().addActionListener(x->searchForTheWeather());
    }

    private String obtainDateFromSeconds(Integer dt) {
        return LocalDateTime.ofInstant(Instant.ofEpochSecond(dt),ZoneId.systemDefault()).format(DateTimeFormatter.ISO_LOCAL_DATE);
    }
    
        private String obtainHoursFromMillis(Integer dt) {
        return LocalDateTime.ofInstant(Instant.ofEpochMilli(dt),ZoneId.systemDefault()).format(DateTimeFormatter.ISO_TIME);
    }

    private void setValuesFromWeather(WeatherInfoModel weatherModel) {
        double temp = round(weatherModel.getMain().getTemp()-273.15,2);
        this.weatherComponent.getCityLabel().setText("City "+weatherModel.getName());
        this.weatherComponent.getPressLabel().setText("Pressure "+String.valueOf(weatherModel.getMain().getPressure()));
        this.weatherComponent.getCoordsLabel().setText("Lat "+weatherModel.getCoord().getLat()+" Lon "+weatherModel.getCoord().getLon());
        this.weatherComponent.getDateLabel().setText("Date "+obtainDateFromSeconds(weatherModel.getDt()));
        this.weatherComponent.getTempLabel().setText("Temperature "+String.valueOf(temp)+" C");
        this.weatherComponent.getSunLabel().setText("Sunset "+obtainHoursFromMillis(weatherModel.getSys().getSunset())+" Sunrise "+obtainHoursFromMillis(weatherModel.getSys().getSunrise()));
        this.weatherComponent.getPressLabel().setText("Pressure "+weatherModel.getMain().getPressure()+" hPa");
        this.weatherComponent.getHumLabel().setText("Humidity "+String.valueOf(weatherModel.getMain().getHumidity())+" %");
    }

  private boolean isDoubleOrInt(String doubleOrInt){
    return doubleOrInt.matches("^-?[0-9]+.?[0-9]{0,5}?$");
  }

    private void addElementToHistoryModel(WeatherInfoModel x) {
        String date = obtainDateFromSeconds(x.getDt()); 
        String coords = "lat "+x.getCoord().getLat() +" lon "+x.getCoord().getLon();
        historyListModel.addElement(date+" "+coords);
        weatherComponent.getHistoryList().setModel(historyListModel);
    }

    private void searchForTheWeather() {
             String searchText = this.weatherComponent.getSearchField().getText().trim();
           
           if(searchText.isEmpty()){
               return;
           }
           String jsonWeather;
           if(searchText.contains(",")){
               String[] coords = searchText.split(",");
               if(!isDoubleOrInt(coords[0]) || !isDoubleOrInt(coords[1])){
                   return;
               }
               jsonWeather = ApiHandler.getWeatherInfo(Double.valueOf(coords[0]),Double.valueOf(coords[1]));
           }else{
               jsonWeather = ApiHandler.getWeatherInfo(searchText);
           }
          
            try {
                currentWeather = CommonUtils.getMapper().readValue(jsonWeather,WeatherInfoModel.class);
                setValuesFromWeather(currentWeather);
            } catch (JsonProcessingException ex) {
            }
    }
    public static double round(double value, int places) {
    if (places < 0) throw new IllegalArgumentException();

    BigDecimal bd = BigDecimal.valueOf(value);
    bd = bd.setScale(places, RoundingMode.HALF_UP);
    return bd.doubleValue();
}
}
